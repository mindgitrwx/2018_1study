import static org.junit.Assert.*;

import org.junit.Test;

public class TransitionCoverageTest {

	//StringStack stringstack =  new StringStack();
    /*
	@BeforeClass
	
	@Before
	
	@AfterClass
    */
	/*
	String strs[] = 
	{
			"dog0","dog1","dog2","dog3","dog4","dog5", "dog6","dog7","dog8","dog9",
			"dog10","dog11", "dog12", "dog13", "dog14", "dog15", "dog16", "dog17", "dog18", "dog19"
	};
	*/
    /* from init */
	@Test
	public void defalutValueTest() {
		StringStack stringstack =  new StringStack();
		assertEquals( stringstack.getMaxSize(), 20) ; 
		assertEquals( stringstack.getSize()   , 0) ; 
	}

	@Test
	public void initToEmptyTestByDefaltInitialzer() {
		StringStack stringstack =  new StringStack();
		assertEquals( 0 , stringstack.getSize()) ; 
		assertEquals( 0 , stringstack.getSize()) ; 
	}


	@Test
	public void initToEmptyTestByNull() {
		String str = null; 
		StringStack stringstack =  new StringStack(str);
		assertEquals( 0 , stringstack.getSize()) ; 
		assertTrue(stringstack.isEmpty()); 
	}

    @Test
	public void initToFilledTest() {
    	String str = "HelloTest";
		StringStack stringstack =  new StringStack(str);
		assertEquals( 1 , stringstack.getSize()) ; 
		assertEquals( "HelloTest" , stringstack.pop()) ; // Todo: 이걸 넣어야 하는지 잘 모르겠음 
	}  

    /* from empty */
    
    /* 가장 최근에 입력한 데이터를 반환하고 스택 크기를 1만큼 감소시킨다 */
    @Test
	public void emptyToEmptyTest() {
		StringStack stringstack =  new StringStack();
		String strs[] = 
		{
				"dog0","dog1","dog2","dog3","dog4","dog5", "dog6","dog7","dog8","dog9",
				"dog10","dog11", "dog12", "dog13", "dog14", "dog15", "dog16", "dog17", "dog18", "dog19"
		};
		for(int i = 0; i<=strs.length; i++)
		{
		    assertEquals( 0 , stringstack.getSize()) ; 
		}
	}

    @Test
	public void emptyToFilledByStrTest() {
		StringStack stringstack =  new StringStack();
		String strs[] = 
		{
				"dog0","dog1","dog2","dog3","dog4","dog5", "dog6","dog7","dog8","dog9",
				"dog10","dog11", "dog12", "dog13", "dog14", "dog15", "dog16", "dog17", "dog18", "dog19"
		};

		for(int i = 0; i<=strs.length; i++)
		{
		    assertEquals( 0 , stringstack.getSize()) ; 
		}
	}

    @Test
	public void emptyToFilledByCharTest() {
		StringStack stringstack =  new StringStack();
		
		char alphabet = 'a';
		
		for(int i = 0; i<=strs.length; i++)
		{
		    assertEquals( 0 , stringstack.getSize()) ; 
		}
	}

    /* from filled */
    @Test
 	public void filledToFilledByStr() {
    	String str = "abc";
    	
    	stringstack.push(str);
		
		assertEquals( 1 , stringstack.getSize()) ; 
	}  

    @Test
 	public void filledToFilledByChr() {
    	    
		char alphabet = 'a';
		stringstack.push(alphabet);

	}  
   
	@Test
	public void filledToFulledByCharTest() {
		StringStack stringstack =  new StringStack();
		String strs[] = 
		{
				"dog0","dog1","dog2","dog3","dog4","dog5", "dog6","dog7","dog8","dog9",
				"dog10","dog11", "dog12", "dog13", "dog14", "dog15", "dog16", "dog17", "dog18", "dog19"
				
		};
		
		for(int i = 0; i<strs.length; i++)
		{
			stringstack.push(strs[i]);
		}
		
		// fulled Test
		assertEquals( 20 , stringstack.getSize()) ; 
		assertEquals( stringstack.getMaxSize(), stringstack.getSize()) ; 
		assertTrue(stringstack.isFull());
	}
	
	@Test
	public void filledToFulledByStrTest() {
		StringStack stringstack =  new StringStack();
		String strs[] = 
		{
				"dog0","dog1","dog2","dog3","dog4","dog5", "dog6","dog7","dog8","dog9",
				"dog10","dog11", "dog12", "dog13", "dog14", "dog15", "dog16", "dog17", "dog18", "dog19"
				
		};
		
		for(int i = 0; i<strs.length; i++)
		{
			stringstack.push(strs[i]);
		}
		
		// fulled Test
		assertEquals( 20 , stringstack.getSize()) ; 
		assertEquals( stringstack.getMaxSize(), stringstack.getSize()) ; 
		assertTrue(stringstack.isFull());
	}

	/* from fulled */
	@Test
	public void fulledToFulledTest() {
		StringStack stringstack =  new StringStack();
		String strs[] = 
		{
				"dog0","dog1","dog2","dog3","dog4","dog5", "dog6","dog7","dog8","dog9",
				"dog10","dog11", "dog12", "dog13", "dog14", "dog15", "dog16", "dog17", "dog18", "dog19"
				
		};
		
		for(int i = 0; i<strs.length; i++)
		{
			stringstack.push(strs[i]);
		}

		// fulled Test
		assertEquals( 20 , stringstack.getSize()) ; 
		assertEquals( stringstack.getMaxSize(), stringstack.getSize()) ; 
		assertTrue(stringstack.isFull());
	}

	// overflow
	@Test
	public void OverflowedStackTestCases() throws IOException  {
		StringStack stringstack =  new StringStack();
		String strs[] = 
		{
				"dog0","dog1","dog2","dog3","dog4","dog5", "dog6","dog7","dog8","dog9",
				"dog10","dog11", "dog12", "dog13", "dog14", "dog15", "dog16", "dog17", "dog18", "dog19",
				"dog20"
		};
		for(int i = 0; i<strs.length; i++)
		{
			stringstack.push(strs[i]);
		}
		assertEquals( stringstack.getMaxSize(), stringstack.getSize()) ; 
	}
}
